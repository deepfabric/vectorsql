// Code generated by goyacc -o sql.go -p sql -v sql.output sql.y. DO NOT EDIT.

//line sql.y:2

package parser

import __yyfmt__ "fmt"

//line sql.y:3

import (
	"github.com/deepfabric/vectorsql/pkg/sql/tree"
	"github.com/deepfabric/vectorsql/pkg/vm/value"
)

//line sql.y:13

type sqlSymUnion struct {
	val interface{}
}

func (u *sqlSymUnion) bool() bool {
	return u.val.(bool)
}

func (u *sqlSymUnion) isNull() bool {
	return u.val == nil
}

func (u *sqlSymUnion) setNegative() *tree.Value {
	v, ok := u.val.(*tree.Value)
	if !ok {
		return nil
	}
	return &tree.Value{value.NewInt(int64(value.MustBeInt(v.E)) * -1)}
}

func (u *sqlSymUnion) valueStatement() *tree.Value {
	return u.val.(*tree.Value)
}

func (u *sqlSymUnion) selectStatement() *tree.Select {
	return u.val.(*tree.Select)
}

func (u *sqlSymUnion) limitStatement() *tree.Limit {
	if u.val == nil {
		return nil
	}
	return u.val.(*tree.Limit)
}

func (u *sqlSymUnion) orderTopStatement() tree.OrderStatement {
	if u.val == nil {
		return nil
	}
	return u.val.(tree.OrderStatement)
}

func (u *sqlSymUnion) orderByStatement() tree.OrderBy {
	if u.val == nil {
		return nil
	}
	return u.val.(tree.OrderBy)
}

func (u *sqlSymUnion) relationStatement() tree.RelationStatement {
	if u.val == nil {
		return nil
	}
	return u.val.(tree.RelationStatement)
}

func (u *sqlSymUnion) joinStatement() *tree.JoinClause {
	return u.val.(*tree.JoinClause)
}

func (u *sqlSymUnion) unionStatement() *tree.UnionClause {
	return u.val.(*tree.UnionClause)
}

func (u *sqlSymUnion) simpleSelectStatement() *tree.SelectClause {
	return u.val.(*tree.SelectClause)
}

func (u *sqlSymUnion) fromStatement() *tree.From {
	if u.val == nil {
		return nil
	}
	return u.val.(*tree.From)
}

func (u *sqlSymUnion) groupByStatement() *tree.GroupBy {
	if u.val == nil {
		return nil
	}
	return u.val.(*tree.GroupBy)
}

func (u *sqlSymUnion) whereStatement() *tree.Where {
	if u.val == nil {
		return nil
	}
	return u.val.(*tree.Where)
}

func (u *sqlSymUnion) subqueryStatement() *tree.Subquery {
	return u.val.(*tree.Subquery)
}

func (u *sqlSymUnion) funcStatement() *tree.FuncExpr {
	return u.val.(*tree.FuncExpr)
}

func (u *sqlSymUnion) selectExprs() tree.SelectExprs {
	return u.val.(tree.SelectExprs)
}

func (u *sqlSymUnion) selectExpr() *tree.SelectExpr {
	if u.val == nil {
		return nil
	}
	return u.val.(*tree.SelectExpr)
}

func (u *sqlSymUnion) tableStatements() tree.TableStatements {
	return u.val.(tree.TableStatements)
}

func (u *sqlSymUnion) tableStatement() tree.TableStatement {
	return u.val.(tree.TableStatement)
}

func (u *sqlSymUnion) limit() *tree.Limit {
	return u.val.(*tree.Limit)
}

func (u *sqlSymUnion) orderStatement() *tree.Order {
	return u.val.(*tree.Order)
}

func (u *sqlSymUnion) direction() tree.Direction {
	return u.val.(tree.Direction)
}

func (u *sqlSymUnion) joinType() tree.JoinType {
	return u.val.(tree.JoinType)
}

func (u *sqlSymUnion) joinCond() tree.JoinCond {
	return u.val.(tree.JoinCond)
}

func (u *sqlSymUnion) tableName() *tree.TableName {
	return u.val.(*tree.TableName)
}

func (u *sqlSymUnion) nameList() tree.NameList {
	return u.val.(tree.NameList)
}

func (u *sqlSymUnion) exprStatement() tree.ExprStatement {
	return u.val.(tree.ExprStatement)
}

func (u *sqlSymUnion) exprStatements() tree.ExprStatements {
	return u.val.(tree.ExprStatements)
}

func (u *sqlSymUnion) colunmNameList() tree.ColunmNameList {
	return u.val.(tree.ColunmNameList)
}

func (u *sqlSymUnion) aliasClause() *tree.AliasClause {
	if u.val == nil {
		return nil
	}
	return u.val.(*tree.AliasClause)
}

//line sql.y:231
type sqlSymType struct {
	yys   int
	id    int32
	pos   int32
	byt   byte
	str   string
	union sqlSymUnion
}

const IDENT = 57346
const ICONST = 57347
const FCONST = 57348
const SCONST = 57349
const LESS_EQUALS = 57350
const GREATER_EQUALS = 57351
const NOT_EQUALS = 57352
const ALL = 57353
const AND = 57354
const AS = 57355
const ASC = 57356
const BETWEEN = 57357
const BOOL = 57358
const BY = 57359
const CAST = 57360
const CROSS = 57361
const DESC = 57362
const DISTINCT = 57363
const EXCEPT = 57364
const EXISTS = 57365
const FTOP = 57366
const FALSE = 57367
const FETCH = 57368
const FIRST = 57369
const FLOAT = 57370
const FROM = 57371
const FULL = 57372
const GROUP = 57373
const HAVING = 57374
const INNER = 57375
const INT = 57376
const INTERSECT = 57377
const IS = 57378
const JOIN = 57379
const NATURAL = 57380
const NEXT = 57381
const NOT = 57382
const NULL = 57383
const OFFSET = 57384
const ON = 57385
const ONLY = 57386
const OR = 57387
const ORDER = 57388
const OUTER = 57389
const RIGHT = 57390
const ROW = 57391
const ROWS = 57392
const SELECT = 57393
const STRING = 57394
const TOP = 57395
const TIME = 57396
const TRUE = 57397
const UNION = 57398
const WHERE = 57399
const NOT_LA = 57400
const AT = 57401
const UMINUS = 57402
const LEFT = 57403

var sqlToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"ICONST",
	"FCONST",
	"SCONST",
	"LESS_EQUALS",
	"GREATER_EQUALS",
	"NOT_EQUALS",
	"ALL",
	"AND",
	"AS",
	"ASC",
	"BETWEEN",
	"BOOL",
	"BY",
	"CAST",
	"CROSS",
	"DESC",
	"DISTINCT",
	"EXCEPT",
	"EXISTS",
	"FTOP",
	"FALSE",
	"FETCH",
	"FIRST",
	"FLOAT",
	"FROM",
	"FULL",
	"GROUP",
	"HAVING",
	"INNER",
	"INT",
	"INTERSECT",
	"IS",
	"JOIN",
	"NATURAL",
	"NEXT",
	"NOT",
	"NULL",
	"OFFSET",
	"ON",
	"ONLY",
	"OR",
	"ORDER",
	"OUTER",
	"RIGHT",
	"ROW",
	"ROWS",
	"SELECT",
	"STRING",
	"TOP",
	"TIME",
	"TRUE",
	"UNION",
	"WHERE",
	"NOT_LA",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'%'",
	"'<'",
	"'>'",
	"'='",
	"'['",
	"']'",
	"'('",
	"')'",
	"'.'",
	"AT",
	"UMINUS",
	"LEFT",
	"','",
}
var sqlStatenames = [...]string{}

const sqlEofCode = 1
const sqlErrCode = 2
const sqlInitialStackSize = 16

//line sql.y:787

//line yacctab:1
var sqlExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 4,
	1, 5,
	26, 5,
	42, 5,
	70, 5,
	-2, 110,
	-1, 60,
	69, 140,
	-2, 131,
}

const sqlPrivate = 57344

const sqlLast = 423

var sqlAct = [...]int{

	46, 42, 179, 222, 201, 134, 154, 149, 5, 189,
	20, 213, 3, 146, 88, 4, 212, 212, 98, 96,
	73, 74, 25, 40, 4, 94, 196, 14, 53, 54,
	55, 197, 204, 192, 26, 243, 186, 211, 78, 77,
	124, 64, 123, 60, 13, 119, 47, 104, 57, 24,
	140, 120, 121, 13, 65, 76, 107, 108, 109, 151,
	11, 122, 91, 45, 58, 95, 24, 125, 68, 237,
	79, 49, 10, 131, 135, 71, 13, 208, 56, 48,
	89, 10, 50, 51, 43, 69, 103, 190, 191, 139,
	187, 188, 59, 87, 105, 106, 107, 108, 109, 38,
	185, 86, 159, 160, 10, 155, 163, 164, 165, 166,
	167, 168, 169, 170, 171, 172, 173, 174, 158, 152,
	14, 138, 24, 157, 13, 180, 181, 13, 13, 13,
	13, 136, 176, 13, 4, 156, 85, 14, 127, 97,
	13, 141, 198, 103, 142, 143, 144, 145, 19, 200,
	148, 132, 10, 203, 126, 10, 10, 10, 10, 199,
	30, 10, 101, 13, 101, 207, 205, 206, 10, 202,
	17, 34, 101, 102, 37, 223, 210, 18, 32, 33,
	162, 161, 70, 118, 12, 119, 102, 216, 102, 36,
	30, 10, 101, 215, 135, 100, 102, 100, 219, 24,
	24, 34, 9, 224, 37, 100, 28, 72, 32, 33,
	227, 225, 226, 155, 229, 35, 102, 70, 221, 36,
	30, 175, 238, 29, 90, 239, 180, 240, 182, 242,
	241, 34, 101, 71, 37, 101, 28, 194, 32, 33,
	23, 220, 129, 195, 147, 35, 14, 14, 13, 36,
	14, 53, 54, 55, 130, 22, 102, 27, 218, 102,
	92, 93, 217, 75, 64, 100, 52, 62, 100, 47,
	61, 57, 228, 184, 230, 35, 10, 14, 53, 54,
	55, 30, 231, 81, 29, 21, 45, 58, 44, 150,
	177, 64, 34, 82, 41, 37, 47, 28, 57, 32,
	33, 56, 128, 14, 183, 50, 51, 209, 31, 66,
	36, 101, 99, 45, 58, 59, 178, 80, 27, 105,
	106, 107, 108, 109, 14, 53, 54, 55, 56, 67,
	153, 137, 50, 51, 43, 102, 35, 133, 64, 101,
	214, 15, 59, 47, 100, 57, 83, 84, 14, 53,
	54, 55, 16, 101, 105, 106, 107, 108, 109, 39,
	45, 58, 64, 102, 113, 114, 115, 63, 193, 57,
	233, 116, 100, 8, 7, 56, 6, 102, 2, 50,
	51, 1, 235, 0, 0, 58, 100, 0, 232, 59,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 56,
	0, 0, 0, 50, 51, 0, 236, 0, 234, 0,
	0, 0, 0, 59, 117, 105, 106, 107, 108, 109,
	110, 111, 112,
}
var sqlPact = [...]int{

	133, -1000, -1000, -1000, 124, 242, -1000, -1000, -1000, 133,
	-37, 262, 273, -13, -1000, 191, -1000, 190, 320, 320,
	-1000, -1000, 243, -30, -1000, -32, 243, 272, 272, 272,
	99, 64, 133, 43, 15, 15, 15, -1000, -10, 23,
	-1000, -1000, 299, -1000, -1000, 320, 356, -24, -1000, -37,
	344, 344, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 320,
	-13, -1000, -1000, -27, -29, 320, -1000, -1000, 33, 156,
	215, 320, 320, 341, 341, -30, -1000, 243, 242, -17,
	133, -1000, -1000, 133, 133, 133, 133, 201, -1000, 133,
	-1000, -1000, -1000, -1000, 2, 23, 116, -10, -1000, 243,
	320, 320, 140, -1000, 137, 344, 344, 344, 344, 344,
	344, 344, 344, 344, 344, 344, 344, 206, -1000, 133,
	-5, -5, 220, 246, 320, 160, -1000, -1000, 31, -1000,
	-1000, 341, 38, -42, -1000, 223, -1000, -44, -1000, -1000,
	320, 171, 141, 171, -1000, 201, -1000, 320, -1000, 138,
	-1000, 320, -1000, -43, -1000, 242, 242, 2, -1000, 180,
	137, -1000, 36, -5, -5, -1000, -1000, -1000, 35, 35,
	35, 35, 35, 35, 295, 344, -33, -1000, -1000, -59,
	341, 327, -1000, 38, -1000, 320, -1000, 257, 253, -1000,
	-1000, -1000, 320, -1000, -1000, -1000, -1000, 243, 150, -1000,
	341, 143, 186, 341, 116, -1000, -1000, 138, -1000, 344,
	260, -1000, 320, -1000, 354, 25, 152, -1000, -1000, -1000,
	-1000, -1000, -1000, 320, 320, -1000, 143, 35, 344, 341,
	-35, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 341,
	-58, -1000, 35, -1000,
}
var sqlPgo = [...]int{

	0, 381, 378, 12, 14, 376, 374, 60, 373, 135,
	368, 43, 367, 240, 18, 8, 71, 359, 55, 352,
	341, 337, 331, 25, 330, 2, 99, 4, 329, 309,
	317, 224, 13, 308, 68, 85, 304, 9, 302, 289,
	7, 1, 0, 288, 79, 3, 285, 10, 5, 6,
	23, 282, 274, 273, 270, 267, 266,
}
var sqlR1 = [...]int{

	0, 1, 2, 3, 20, 20, 19, 19, 19, 21,
	21, 48, 10, 10, 10, 29, 29, 28, 28, 28,
	28, 34, 35, 35, 36, 36, 36, 37, 37, 38,
	38, 4, 4, 4, 4, 4, 8, 8, 17, 26,
	26, 50, 50, 50, 50, 23, 23, 24, 24, 40,
	40, 39, 27, 27, 45, 45, 25, 25, 41, 41,
	41, 41, 41, 41, 41, 42, 42, 42, 42, 42,
	42, 42, 42, 42, 42, 43, 43, 43, 43, 43,
	43, 43, 43, 43, 44, 44, 44, 44, 44, 44,
	44, 53, 53, 53, 56, 56, 54, 54, 55, 52,
	51, 51, 51, 51, 51, 46, 46, 47, 47, 9,
	7, 6, 6, 6, 30, 30, 30, 5, 5, 5,
	5, 32, 33, 33, 33, 33, 31, 31, 49, 49,
	15, 16, 16, 16, 16, 18, 18, 22, 22, 11,
	12, 14, 13,
}
var sqlR2 = [...]int{

	0, 1, 1, 3, 1, 0, 3, 2, 2, 1,
	3, 2, 1, 1, 0, 1, 0, 2, 2, 1,
	1, 5, 2, 3, 1, 3, 0, 1, 1, 1,
	1, 2, 1, 1, 1, 4, 6, 7, 1, 1,
	3, 1, 2, 3, 1, 2, 0, 1, 3, 1,
	0, 2, 3, 0, 2, 0, 1, 3, 1, 2,
	3, 3, 3, 4, 1, 1, 1, 2, 2, 3,
	3, 3, 3, 3, 1, 3, 3, 3, 3, 3,
	3, 5, 6, 2, 1, 1, 1, 1, 1, 1,
	3, 1, 2, 2, 1, 1, 3, 4, 6, 1,
	1, 1, 1, 1, 1, 3, 2, 1, 0, 3,
	1, 4, 4, 4, 1, 1, 0, 4, 5, 4,
	4, 2, 2, 2, 2, 1, 1, 0, 2, 2,
	1, 1, 4, 3, 6, 3, 0, 1, 3, 1,
	1, 1, 1,
}
var sqlChk = [...]int{

	-1000, -1, -2, -3, -4, -15, -5, -6, -8, 69,
	-16, -7, 51, -11, 4, -20, -19, 46, 53, 24,
	-47, -46, 13, -13, -11, -3, 71, 56, 35, 22,
	19, -33, 37, 38, 30, 74, 48, 33, -26, -17,
	-50, 21, -41, 61, -43, 40, -42, 23, -44, -16,
	59, 60, -56, 5, 6, 7, 55, 25, 41, 69,
	-11, -54, -55, -12, 18, 67, -29, -28, -34, -35,
	26, 42, 17, -41, -41, -13, -18, 69, 70, -11,
	-30, 11, 21, -30, -30, 37, 37, -7, -4, 37,
	-31, 47, -31, -31, -23, 75, 29, -26, -14, 13,
	45, 12, 36, -11, -41, 59, 60, 61, 62, 63,
	64, 65, 66, 8, 9, 10, 15, 58, -9, 69,
	-42, -42, -41, 69, 69, -41, -35, -34, -38, 27,
	39, -41, -44, -21, -48, -41, -18, -22, -11, -47,
	67, -7, -7, -7, -7, -7, -32, 43, -7, -40,
	-39, 57, -50, -24, -49, -15, -9, -23, -14, -41,
	-41, 41, 40, -42, -42, -42, -42, -42, -42, -42,
	-42, -42, -42, -42, -42, 15, -3, 70, 70, -25,
	-41, -41, 68, -36, -53, 69, 5, 59, 60, -37,
	49, 50, 75, -10, 14, 20, 70, 75, -41, -32,
	-41, -27, 31, -41, 75, -47, -47, -40, 41, 12,
	-42, 70, 75, 70, 13, -37, -41, 5, 5, -48,
	-11, 68, -45, 32, 17, -49, -27, -42, 12, -41,
	-52, -51, 34, 16, 54, 28, 52, 44, 70, -41,
	-25, -45, -42, 70,
}
var sqlDef = [...]int{

	0, -2, 1, 2, -2, 108, 32, 33, 34, 0,
	130, 0, 0, 131, 139, 16, 4, 0, 0, 0,
	31, 107, 0, 136, 142, 0, 0, 116, 116, 116,
	0, 0, 0, 0, 127, 127, 127, 125, 46, 0,
	39, 38, 41, 44, 58, 0, 64, 0, 65, 66,
	0, 0, 74, 84, 85, 86, 87, 88, 89, 0,
	-2, 94, 95, 0, 0, 0, 3, 15, 19, 20,
	0, 0, 0, 7, 8, 136, 106, 0, 108, 133,
	0, 114, 115, 0, 0, 0, 0, 0, 110, 0,
	122, 126, 123, 124, 50, 0, 0, 46, 42, 0,
	0, 0, 0, 141, 59, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 83, 0,
	67, 68, 0, 0, 0, 0, 17, 18, 26, 29,
	30, 22, 65, 6, 9, 14, 105, 0, 137, 35,
	0, 111, 112, 113, 117, 0, 119, 0, 120, 53,
	49, 0, 40, 45, 47, 108, 108, 50, 43, 60,
	61, 62, 0, 69, 70, 71, 72, 73, 75, 76,
	77, 78, 79, 80, 0, 0, 0, 90, 96, 0,
	56, 0, 132, 0, 24, 0, 91, 0, 0, 23,
	27, 28, 0, 11, 12, 13, 135, 0, 0, 118,
	121, 55, 0, 51, 0, 128, 129, 53, 63, 0,
	0, 109, 0, 97, 0, 0, 0, 92, 93, 10,
	138, 134, 36, 0, 0, 48, 55, 81, 0, 57,
	0, 99, 100, 101, 102, 103, 104, 21, 25, 54,
	52, 37, 82, 98,
}
var sqlTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 63, 3, 3,
	69, 70, 61, 59, 75, 60, 71, 62, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	64, 66, 65, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 67, 3, 68,
}
var sqlTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 72, 73, 74,
}
var sqlTok3 = [...]int{
	0,
}

var sqlErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	sqlDebug        = 0
	sqlErrorVerbose = false
)

type sqlLexer interface {
	Lex(lval *sqlSymType) int
	Error(s string)
}

type sqlParser interface {
	Parse(sqlLexer) int
	Lookahead() int
}

type sqlParserImpl struct {
	lval  sqlSymType
	stack [sqlInitialStackSize]sqlSymType
	char  int
}

func (p *sqlParserImpl) Lookahead() int {
	return p.char
}

func sqlNewParser() sqlParser {
	return &sqlParserImpl{}
}

const sqlFlag = -1000

func sqlTokname(c int) string {
	if c >= 1 && c-1 < len(sqlToknames) {
		if sqlToknames[c-1] != "" {
			return sqlToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func sqlStatname(s int) string {
	if s >= 0 && s < len(sqlStatenames) {
		if sqlStatenames[s] != "" {
			return sqlStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func sqlErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !sqlErrorVerbose {
		return "syntax error"
	}

	for _, e := range sqlErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + sqlTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := sqlPact[state]
	for tok := TOKSTART; tok-1 < len(sqlToknames); tok++ {
		if n := base + tok; n >= 0 && n < sqlLast && sqlChk[sqlAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if sqlDef[state] == -2 {
		i := 0
		for sqlExca[i] != -1 || sqlExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; sqlExca[i] >= 0; i += 2 {
			tok := sqlExca[i]
			if tok < TOKSTART || sqlExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if sqlExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += sqlTokname(tok)
	}
	return res
}

func sqllex1(lex sqlLexer, lval *sqlSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = sqlTok1[0]
		goto out
	}
	if char < len(sqlTok1) {
		token = sqlTok1[char]
		goto out
	}
	if char >= sqlPrivate {
		if char < sqlPrivate+len(sqlTok2) {
			token = sqlTok2[char-sqlPrivate]
			goto out
		}
	}
	for i := 0; i < len(sqlTok3); i += 2 {
		token = sqlTok3[i+0]
		if token == char {
			token = sqlTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = sqlTok2[1] /* unknown char */
	}
	if sqlDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", sqlTokname(token), uint(char))
	}
	return char, token
}

func sqlParse(sqllex sqlLexer) int {
	return sqlNewParser().Parse(sqllex)
}

func (sqlrcvr *sqlParserImpl) Parse(sqllex sqlLexer) int {
	var sqln int
	var sqlVAL sqlSymType
	var sqlDollar []sqlSymType
	_ = sqlDollar // silence set and not used
	sqlS := sqlrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	sqlstate := 0
	sqlrcvr.char = -1
	sqltoken := -1 // sqlrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		sqlstate = -1
		sqlrcvr.char = -1
		sqltoken = -1
	}()
	sqlp := -1
	goto sqlstack

ret0:
	return 0

ret1:
	return 1

sqlstack:
	/* put a state and value onto the stack */
	if sqlDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", sqlTokname(sqltoken), sqlStatname(sqlstate))
	}

	sqlp++
	if sqlp >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlS[sqlp] = sqlVAL
	sqlS[sqlp].yys = sqlstate

sqlnewstate:
	sqln = sqlPact[sqlstate]
	if sqln <= sqlFlag {
		goto sqldefault /* simple state */
	}
	if sqlrcvr.char < 0 {
		sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
	}
	sqln += sqltoken
	if sqln < 0 || sqln >= sqlLast {
		goto sqldefault
	}
	sqln = sqlAct[sqln]
	if sqlChk[sqln] == sqltoken { /* valid shift */
		sqlrcvr.char = -1
		sqltoken = -1
		sqlVAL = sqlrcvr.lval
		sqlstate = sqln
		if Errflag > 0 {
			Errflag--
		}
		goto sqlstack
	}

sqldefault:
	/* default state action */
	sqln = sqlDef[sqlstate]
	if sqln == -2 {
		if sqlrcvr.char < 0 {
			sqlrcvr.char, sqltoken = sqllex1(sqllex, &sqlrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if sqlExca[xi+0] == -1 && sqlExca[xi+1] == sqlstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			sqln = sqlExca[xi+0]
			if sqln < 0 || sqln == sqltoken {
				break
			}
		}
		sqln = sqlExca[xi+1]
		if sqln < 0 {
			goto ret0
		}
	}
	if sqln == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			sqllex.Error(sqlErrorMessage(sqlstate, sqltoken))
			Nerrs++
			if sqlDebug >= 1 {
				__yyfmt__.Printf("%s", sqlStatname(sqlstate))
				__yyfmt__.Printf(" saw %s\n", sqlTokname(sqltoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for sqlp >= 0 {
				sqln = sqlPact[sqlS[sqlp].yys] + sqlErrCode
				if sqln >= 0 && sqln < sqlLast {
					sqlstate = sqlAct[sqln] /* simulate a shift of "error" */
					if sqlChk[sqlstate] == sqlErrCode {
						goto sqlstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if sqlDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", sqlS[sqlp].yys)
				}
				sqlp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if sqlDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", sqlTokname(sqltoken))
			}
			if sqltoken == sqlEofCode {
				goto ret1
			}
			sqlrcvr.char = -1
			sqltoken = -1
			goto sqlnewstate /* try again in the same state */
		}
	}

	/* reduction by production sqln */
	if sqlDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", sqln, sqlStatname(sqlstate))
	}

	sqlnt := sqln
	sqlpt := sqlp
	_ = sqlpt // guard against "declared and not used"

	sqlp -= sqlR2[sqln]
	// sqlp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if sqlp+1 >= len(sqlS) {
		nyys := make([]sqlSymType, len(sqlS)*2)
		copy(nyys, sqlS)
		sqlS = nyys
	}
	sqlVAL = sqlS[sqlp+1]

	/* consult goto table to find next state */
	sqln = sqlR1[sqln]
	sqlg := sqlPgo[sqln]
	sqlj := sqlg + sqlS[sqlp].yys + 1

	if sqlj >= sqlLast {
		sqlstate = sqlAct[sqlg]
	} else {
		sqlstate = sqlAct[sqlj]
		if sqlChk[sqlstate] != -sqln {
			sqlstate = sqlAct[sqlg]
		}
	}
	// dummy call; replaced with literal code
	switch sqlnt {

	case 1:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:325
		{
			sqllex.(*lexer).SetStmt(sqlDollar[1].union.selectStatement())
		}
	case 2:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:327
		{
			sqlVAL.union.val = sqlDollar[1].union.selectStatement()
		}
	case 3:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:330
		{
			sqlVAL.union.val = &tree.Select{
				Limit:    sqlDollar[3].union.limitStatement(),
				Order:    sqlDollar[2].union.orderTopStatement(),
				Relation: sqlDollar[1].union.relationStatement(),
			}
		}
	case 4:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:340
		{
			sqlVAL.union.val = sqlDollar[1].union.orderTopStatement()
		}
	case 5:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:341
		{
			sqlVAL.union.val = nil
		}
	case 6:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:343
		{
			sqlVAL.union.val = sqlDollar[3].union.orderByStatement()
		}
	case 7:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:344
		{
			sqlVAL.union.val = &tree.Top{
				N: sqlDollar[2].union.exprStatement(),
			}
		}
	case 8:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:348
		{
			sqlVAL.union.val = &tree.Ftop{
				N: sqlDollar[2].union.exprStatement(),
			}
		}
	case 9:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:353
		{
			sqlVAL.union.val = tree.OrderBy{sqlDollar[1].union.orderStatement()}
		}
	case 10:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:354
		{
			sqlVAL.union.val = append(sqlDollar[1].union.orderByStatement(), sqlDollar[3].union.orderStatement())
		}
	case 11:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:357
		{
			sqlVAL.union.val = &tree.Order{
				E:    sqlDollar[1].union.exprStatement(),
				Type: sqlDollar[2].union.direction(),
			}
		}
	case 12:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:364
		{
			sqlVAL.union.val = tree.Ascending
		}
	case 13:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:365
		{
			sqlVAL.union.val = tree.Descending
		}
	case 14:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:366
		{
			sqlVAL.union.val = tree.DefaultDirection
		}
	case 15:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:369
		{
			sqlVAL.union.val = sqlDollar[1].union.limitStatement()
		}
	case 16:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:370
		{
			sqlVAL.union.val = nil
		}
	case 17:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:373
		{
			if sqlDollar[1].union.limitStatement() == nil {
				sqlVAL.union.val = sqlDollar[2].union.limitStatement()
			} else {
				sqlVAL.union.val = sqlDollar[1].union.limitStatement()
				sqlVAL.union.val.(*tree.Limit).Offset = sqlDollar[2].union.limitStatement().Offset
			}
		}
	case 18:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:382
		{
			sqlVAL.union.val = sqlDollar[1].union.limitStatement()
			if sqlDollar[2].union.limitStatement() != nil {
				sqlVAL.union.val.(*tree.Limit).Count = sqlDollar[2].union.limitStatement().Count
			}
		}
	case 19:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:389
		{
			sqlVAL.union.val = sqlDollar[1].union.limitStatement()
		}
	case 20:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:393
		{
			sqlVAL.union.val = sqlDollar[1].union.limitStatement()
		}
	case 21:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:398
		{
			sqlVAL.union.val = &tree.Limit{Count: sqlDollar[3].union.exprStatement()}
		}
	case 22:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:402
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.exprStatement()}
		}
	case 23:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:403
		{
			sqlVAL.union.val = &tree.Limit{Offset: sqlDollar[2].union.exprStatement()}
		}
	case 24:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:405
		{
			sqlVAL.union.val = sqlDollar[1].union.exprStatement()
		}
	case 25:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:406
		{
			sqlVAL.union.val = sqlDollar[2].union.exprStatement()
		}
	case 26:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:407
		{
			sqlVAL.union.val = &tree.Value{value.NewInt(1)}
		}
	case 27:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:409
		{
		}
	case 28:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:410
		{
		}
	case 29:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:412
		{
		}
	case 30:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:413
		{
		}
	case 31:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:417
		{
			sqlVAL.union.val = &tree.AliasedTable{
				As:  sqlDollar[2].union.aliasClause(),
				Tbl: sqlDollar[1].union.tableName(),
			}
		}
	case 32:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:422
		{
			sqlVAL.union.val = sqlDollar[1].union.joinStatement()
		}
	case 33:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:423
		{
			sqlVAL.union.val = sqlDollar[1].union.unionStatement()
		}
	case 34:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:424
		{
			sqlVAL.union.val = sqlDollar[1].union.simpleSelectStatement()
		}
	case 35:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:425
		{
			sqlVAL.union.val = &tree.AliasedSelect{
				As:  sqlDollar[4].union.aliasClause(),
				Sel: sqlDollar[2].union.selectStatement(),
			}
		}
	case 36:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:433
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: false,
				Sel:      sqlDollar[2].union.selectExprs(),
				From:     sqlDollar[3].union.fromStatement(),
				Where:    sqlDollar[4].union.whereStatement(),
				Having:   sqlDollar[6].union.whereStatement(),
				GroupBy:  sqlDollar[5].union.groupByStatement(),
			}
		}
	case 37:
		sqlDollar = sqlS[sqlpt-7 : sqlpt+1]
//line sql.y:444
		{
			sqlVAL.union.val = &tree.SelectClause{
				Distinct: sqlDollar[2].union.bool(),
				Sel:      sqlDollar[3].union.selectExprs(),
				From:     sqlDollar[4].union.fromStatement(),
				Where:    sqlDollar[5].union.whereStatement(),
				Having:   sqlDollar[7].union.whereStatement(),
				GroupBy:  sqlDollar[6].union.groupByStatement(),
			}
		}
	case 38:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:457
		{
			sqlVAL.union.val = true
		}
	case 39:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:462
		{
			if sqlDollar[1].union.isNull() {
				sqlVAL.union.val = tree.SelectExprs{}
			} else {
				sqlVAL.union.val = tree.SelectExprs{sqlDollar[1].union.selectExpr()}
			}
		}
	case 40:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:470
		{
			if sqlDollar[3].union.isNull() {
				sqlVAL.union.val = sqlDollar[1].union.selectExprs()
			} else {
				sqlVAL.union.val = append(sqlDollar[1].union.selectExprs(), sqlDollar[3].union.selectExpr())
			}
		}
	case 41:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:479
		{
			sqlVAL.union.val = &tree.SelectExpr{E: sqlDollar[1].union.exprStatement()}
		}
	case 42:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:483
		{
			sqlVAL.union.val = &tree.SelectExpr{E: sqlDollar[1].union.exprStatement(), As: tree.Name(sqlDollar[2].str)}
		}
	case 43:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:487
		{
			sqlVAL.union.val = &tree.SelectExpr{E: sqlDollar[1].union.exprStatement(), As: tree.Name(sqlDollar[3].str)}
		}
	case 44:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:491
		{
			sqlVAL.union.val = nil
		}
	case 45:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:498
		{
			sqlVAL.union.val = &tree.From{sqlDollar[2].union.tableStatements()}
		}
	case 46:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:501
		{
			sqlVAL.union.val = nil
		}
	case 47:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:504
		{
			sqlVAL.union.val = tree.TableStatements{sqlDollar[1].union.tableStatement()}
		}
	case 48:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:508
		{
			sqlVAL.union.val = append(sqlDollar[1].union.tableStatements(), sqlDollar[3].union.tableStatement())
		}
	case 49:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:515
		{
			sqlVAL.union.val = &tree.Where{Type: tree.AstWhere, E: sqlDollar[1].union.exprStatement()}
		}
	case 50:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:518
		{
			sqlVAL.union.val = nil
		}
	case 51:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:520
		{
			sqlVAL.union.val = sqlDollar[2].union.exprStatement()
		}
	case 52:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:524
		{
			sqlVAL.union.val = &tree.GroupBy{sqlDollar[3].union.exprStatements()}
		}
	case 53:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:525
		{
			sqlVAL.union.val = nil
		}
	case 54:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:530
		{
			sqlVAL.union.val = &tree.Where{Type: tree.AstHaving, E: sqlDollar[2].union.exprStatement()}
		}
	case 55:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:533
		{
			sqlVAL.union.val = nil
		}
	case 56:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:537
		{
			sqlVAL.union.val = tree.ExprStatements{sqlDollar[1].union.exprStatement()}
		}
	case 57:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:538
		{
			sqlVAL.union.val = append(sqlDollar[1].union.exprStatements(), sqlDollar[3].union.exprStatement())
		}
	case 58:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:540
		{
			sqlVAL.union.val = sqlDollar[1].union.exprStatement()
		}
	case 59:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:541
		{
			sqlVAL.union.val = &tree.NotExpr{E: sqlDollar[2].union.exprStatement()}
		}
	case 60:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:542
		{
			sqlVAL.union.val = &tree.OrExpr{Left: sqlDollar[1].union.exprStatement(), Right: sqlDollar[3].union.exprStatement()}
		}
	case 61:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:543
		{
			sqlVAL.union.val = &tree.AndExpr{Left: sqlDollar[1].union.exprStatement(), Right: sqlDollar[3].union.exprStatement()}
		}
	case 62:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:544
		{
			sqlVAL.union.val = &tree.IsNullExpr{E: sqlDollar[1].union.exprStatement()}
		}
	case 63:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:545
		{
			sqlVAL.union.val = &tree.IsNotNullExpr{E: sqlDollar[1].union.exprStatement()}
		}
	case 64:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:546
		{
			sqlVAL.union.val = sqlDollar[1].union.exprStatement()
		}
	case 65:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:548
		{
			sqlVAL.union.val = sqlDollar[1].union.exprStatement()
		}
	case 66:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:549
		{
			sqlVAL.union.val = sqlDollar[1].union.colunmNameList()
		}
	case 67:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:550
		{
			sqlVAL.union.val = sqlDollar[2].union.exprStatement()
		}
	case 68:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:551
		{
			sqlVAL.union.val = &tree.UnaryMinusExpr{E: sqlDollar[2].union.exprStatement()}
		}
	case 69:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:552
		{
			sqlVAL.union.val = &tree.PlusExpr{Left: sqlDollar[1].union.exprStatement(), Right: sqlDollar[3].union.exprStatement()}
		}
	case 70:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:553
		{
			sqlVAL.union.val = &tree.MinusExpr{Left: sqlDollar[1].union.exprStatement(), Right: sqlDollar[3].union.exprStatement()}
		}
	case 71:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:554
		{
			sqlVAL.union.val = &tree.MultExpr{Left: sqlDollar[1].union.exprStatement(), Right: sqlDollar[3].union.exprStatement()}
		}
	case 72:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:555
		{
			sqlVAL.union.val = &tree.DivExpr{Left: sqlDollar[1].union.exprStatement(), Right: sqlDollar[3].union.exprStatement()}
		}
	case 73:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:556
		{
			sqlVAL.union.val = &tree.ModExpr{Left: sqlDollar[1].union.exprStatement(), Right: sqlDollar[3].union.exprStatement()}
		}
	case 74:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:557
		{
			sqlVAL.union.val = sqlDollar[1].union.funcStatement()
		}
	case 75:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:559
		{
			sqlVAL.union.val = &tree.LtExpr{Left: sqlDollar[1].union.exprStatement(), Right: sqlDollar[3].union.exprStatement()}
		}
	case 76:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:560
		{
			sqlVAL.union.val = &tree.GtExpr{Left: sqlDollar[1].union.exprStatement(), Right: sqlDollar[3].union.exprStatement()}
		}
	case 77:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:561
		{
			sqlVAL.union.val = &tree.EqExpr{Left: sqlDollar[1].union.exprStatement(), Right: sqlDollar[3].union.exprStatement()}
		}
	case 78:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:562
		{
			sqlVAL.union.val = &tree.LeExpr{Left: sqlDollar[1].union.exprStatement(), Right: sqlDollar[3].union.exprStatement()}
		}
	case 79:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:563
		{
			sqlVAL.union.val = &tree.GeExpr{Left: sqlDollar[1].union.exprStatement(), Right: sqlDollar[3].union.exprStatement()}
		}
	case 80:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:564
		{
			sqlVAL.union.val = &tree.NeExpr{Left: sqlDollar[1].union.exprStatement(), Right: sqlDollar[3].union.exprStatement()}
		}
	case 81:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:565
		{
			sqlVAL.union.val = &tree.BetweenExpr{E: sqlDollar[1].union.exprStatement(), From: sqlDollar[3].union.exprStatement(), To: sqlDollar[5].union.exprStatement()}
		}
	case 82:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:566
		{
			sqlVAL.union.val = &tree.NotBetweenExpr{E: sqlDollar[1].union.exprStatement(), From: sqlDollar[4].union.exprStatement(), To: sqlDollar[6].union.exprStatement()}
		}
	case 83:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:567
		{
			sqlVAL.union.val = sqlDollar[2].union.subqueryStatement()
			sqlVAL.union.val.(*tree.Subquery).Exists = true
		}
	case 84:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:572
		{
			sqlVAL.union.val = sqlDollar[1].union.valueStatement()
		}
	case 85:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:573
		{
			sqlVAL.union.val = sqlDollar[1].union.valueStatement()
		}
	case 86:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:574
		{
			sqlVAL.union.val = sqlDollar[1].union.valueStatement()
		}
	case 87:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:575
		{
			sqlVAL.union.val = &tree.Value{&value.ConstTrue}
		}
	case 88:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:576
		{
			sqlVAL.union.val = &tree.Value{&value.ConstFalse}
		}
	case 89:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:577
		{
			sqlVAL.union.val = &tree.Value{value.ConstNull}
		}
	case 90:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:578
		{
			sqlVAL.union.val = &tree.ParenExpr{sqlDollar[2].union.exprStatement()}
		}
	case 91:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:580
		{
			sqlVAL.union.val = sqlDollar[1].union.valueStatement()
		}
	case 92:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:581
		{
			sqlVAL.union.val = sqlDollar[2].union.valueStatement()
		}
	case 93:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:582
		{
			sqlVAL.union.val = sqlDollar[2].union.setNegative()
		}
	case 94:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:587
		{
			sqlVAL.union.val = sqlDollar[1].union.funcStatement()
		}
	case 95:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:591
		{
			sqlVAL.union.val = sqlDollar[1].union.funcStatement()
		}
	case 96:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:596
		{
			sqlVAL.union.val = &tree.FuncExpr{Name: sqlDollar[1].str}
		}
	case 97:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:600
		{
			sqlVAL.union.val = &tree.FuncExpr{Name: sqlDollar[1].str, Es: sqlDollar[3].union.exprStatements()}
		}
	case 98:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:605
		{
			sqlVAL.union.val = &tree.FuncExpr{Name: "cast", Es: tree.ExprStatements{sqlDollar[3].union.exprStatement(), sqlDollar[5].union.exprStatement()}}
		}
	case 99:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:609
		{
			sqlVAL.union.val = sqlDollar[1].union.exprStatement()
		}
	case 100:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:611
		{
			sqlVAL.union.val = &tree.Value{value.NewString("int")}
		}
	case 101:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:612
		{
			sqlVAL.union.val = &tree.Value{value.NewString("bool")}
		}
	case 102:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:613
		{
			sqlVAL.union.val = &tree.Value{value.NewString("time")}
		}
	case 103:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:614
		{
			sqlVAL.union.val = &tree.Value{value.NewString("float")}
		}
	case 104:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:615
		{
			sqlVAL.union.val = &tree.Value{value.NewString("string")}
		}
	case 105:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:620
		{
			sqlVAL.union.val = &tree.AliasClause{Alias: tree.Name(sqlDollar[2].str), Cols: sqlDollar[3].union.nameList()}
		}
	case 106:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:624
		{
			sqlVAL.union.val = &tree.AliasClause{Alias: tree.Name(sqlDollar[1].str), Cols: sqlDollar[2].union.nameList()}
		}
	case 107:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:628
		{
			sqlVAL.union.val = sqlDollar[1].union.aliasClause()
		}
	case 108:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:629
		{
			sqlVAL.union.val = nil
		}
	case 109:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:633
		{
			sqlVAL.union.val = &tree.Subquery{Select: sqlDollar[2].union.selectStatement(), Exists: false}
		}
	case 110:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:636
		{
			sqlVAL.union.val = sqlDollar[1].union.relationStatement()
		}
	case 111:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:641
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.UnionOp,
				Left:  sqlDollar[1].union.relationStatement(),
				Right: sqlDollar[4].union.relationStatement(),
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 112:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:650
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.IntersectOp,
				Left:  sqlDollar[1].union.relationStatement(),
				Right: sqlDollar[4].union.relationStatement(),
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 113:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:659
		{
			sqlVAL.union.val = &tree.UnionClause{
				Type:  tree.ExceptOp,
				Left:  sqlDollar[1].union.relationStatement(),
				Right: sqlDollar[4].union.relationStatement(),
				All:   sqlDollar[3].union.bool(),
			}
		}
	case 114:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:668
		{
			sqlVAL.union.val = true
		}
	case 115:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:669
		{
			sqlVAL.union.val = false
		}
	case 116:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:670
		{
			sqlVAL.union.val = false
		}
	case 117:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:675
		{
			sqlVAL.union.val = &tree.JoinClause{
				Type:  tree.CrossOp,
				Cond:  &tree.NonJoinCond{},
				Left:  sqlDollar[1].union.relationStatement(),
				Right: sqlDollar[4].union.relationStatement(),
			}
		}
	case 118:
		sqlDollar = sqlS[sqlpt-5 : sqlpt+1]
//line sql.y:684
		{
			sqlVAL.union.val = &tree.JoinClause{
				Type:  sqlDollar[2].union.joinType(),
				Cond:  sqlDollar[5].union.joinCond(),
				Left:  sqlDollar[1].union.relationStatement(),
				Right: sqlDollar[4].union.relationStatement(),
			}
		}
	case 119:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:693
		{
			sqlVAL.union.val = &tree.JoinClause{
				Type:  tree.InnerOp,
				Cond:  sqlDollar[4].union.joinCond(),
				Left:  sqlDollar[1].union.relationStatement(),
				Right: sqlDollar[3].union.relationStatement(),
			}
		}
	case 120:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:702
		{
			sqlVAL.union.val = &tree.JoinClause{
				Type:  tree.NaturalOp,
				Cond:  &tree.NonJoinCond{},
				Left:  sqlDollar[1].union.relationStatement(),
				Right: sqlDollar[4].union.relationStatement(),
			}
		}
	case 121:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:711
		{
			sqlVAL.union.val = &tree.OnJoinCond{E: sqlDollar[2].union.exprStatement()}
		}
	case 122:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:713
		{
			sqlVAL.union.val = tree.FullOp
		}
	case 123:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:714
		{
			sqlVAL.union.val = tree.LeftOp
		}
	case 124:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:715
		{
			sqlVAL.union.val = tree.RightOp
		}
	case 125:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:716
		{
			sqlVAL.union.val = tree.InnerOp
		}
	case 126:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:718
		{
		}
	case 127:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:719
		{
		}
	case 128:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:724
		{
			sqlVAL.union.val = &tree.AliasedTable{
				Tbl: sqlDollar[1].union.tableName(),
				As:  sqlDollar[2].union.aliasClause(),
			}
		}
	case 129:
		sqlDollar = sqlS[sqlpt-2 : sqlpt+1]
//line sql.y:731
		{
			sqlVAL.union.val = &tree.AliasedTable{
				Tbl: sqlDollar[1].union.subqueryStatement(),
				As:  sqlDollar[2].union.aliasClause(),
			}
		}
	case 130:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:741
		{
			sqlVAL.union.val = &tree.TableName{sqlDollar[1].union.colunmNameList()}
		}
	case 131:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:748
		{
			sqlVAL.union.val = tree.ColunmNameList{tree.ColunmName{Path: tree.Name(sqlDollar[1].str)}}
		}
	case 132:
		sqlDollar = sqlS[sqlpt-4 : sqlpt+1]
//line sql.y:752
		{
			sqlVAL.union.val = tree.ColunmNameList{tree.ColunmName{Path: tree.Name(sqlDollar[1].str), Index: sqlDollar[3].union.exprStatement()}}
		}
	case 133:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:756
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colunmNameList(), tree.ColunmName{Path: tree.Name(sqlDollar[3].str)})
		}
	case 134:
		sqlDollar = sqlS[sqlpt-6 : sqlpt+1]
//line sql.y:760
		{
			sqlVAL.union.val = append(sqlDollar[1].union.colunmNameList(), tree.ColunmName{Path: tree.Name(sqlDollar[3].str), Index: sqlDollar[5].union.exprStatement()})
		}
	case 135:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:765
		{
			sqlVAL.union.val = sqlDollar[2].union.nameList()
		}
	case 136:
		sqlDollar = sqlS[sqlpt-0 : sqlpt+1]
//line sql.y:766
		{
			sqlVAL.union.val = tree.NameList(nil)
		}
	case 137:
		sqlDollar = sqlS[sqlpt-1 : sqlpt+1]
//line sql.y:769
		{
			sqlVAL.union.val = tree.NameList{tree.Name(sqlDollar[1].str)}
		}
	case 138:
		sqlDollar = sqlS[sqlpt-3 : sqlpt+1]
//line sql.y:773
		{
			sqlVAL.union.val = append(sqlDollar[1].union.nameList(), tree.Name(sqlDollar[3].str))
		}
	}
	goto sqlstack /* stack new state and value */
}
